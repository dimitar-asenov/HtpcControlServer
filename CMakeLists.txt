cmake_minimum_required(VERSION 3.2.2)
set(CMAKE_VERBOSE_MAKEFILE ON)

# Prevent in-source builds
if("${CMAKE_SOURCE_DIR}" STREQUAL "${CMAKE_BINARY_DIR}")
    message(FATAL_ERROR "In-source builds can be messy and therefore disabled. Please remove CMakeCache.txt and the CMakeFiles/ directory. Then build out-of-source.")
endif()

project(HtpcControlServer)

# This is specific for using a Make-based build
find_program(CCACHE_FOUND ccache)
if(CCACHE_FOUND)
	set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)
	set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ccache)
endif(CCACHE_FOUND)

# Find includes in corresponding build directories
set(CMAKE_INCLUDE_CURRENT_DIR ON)
# Instruct CMake to run moc automatically when needed.
set(CMAKE_AUTOMOC ON)

find_package(Qt5 REQUIRED Core)
add_definitions(-D_REENTRANT -DQT_NO_KEYWORDS)
add_definitions(-DDEBUG) # -DQT_NO_DEBUG <-- get rid of this

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++1z -pedantic-errors -Wall -W -Werror -Wextra -O2 -fno-omit-frame-pointer -Woverloaded-virtual -Winvalid-pch")

if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
	set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-unused-private-field -fparse-all-comments")
endif()

function(use_precompiled_header targetName)
	message("Using precompiled header for ${targetName} ")
    
	# A custom target name for the precompiled header
	set(precompiled ${targetName}-Precompiled-Header)
	
	# Create a cpp file which cmake can build to get the precompiled header file
	set(precompiled_cpp ${CMAKE_CURRENT_BINARY_DIR}/precompiled_cpp.cpp)
	if(NOT EXISTS ${precompiled_cpp})
		file(WRITE ${precompiled_cpp} "#include \"${CMAKE_CURRENT_SOURCE_DIR}/src/precompiled.h\"\n")
	endif()
	
	# The precompiled header target
	add_library(${precompiled} OBJECT ${CMAKE_CURRENT_SOURCE_DIR}/src/precompiled.h ${precompiled_cpp})
	set_target_properties(${precompiled} PROPERTIES AUTOMOC OFF)
	target_compile_options(${precompiled} PRIVATE -x c++-header)
	
	# Inherited compilation flags
	get_transitive_link_dependencies_for_precompiled_header(${targetName} ${precompiled})

	# Add another target that will copy the object file generated by the precompiled target
	# and rename it to a suitable .gch file
	set(precompiledCopy ${targetName}-Precompiled-Header-CopyAndRename)
	set(precompiledSubDir ${precompiled})
	add_custom_target(${precompiledCopy}
		COMMAND ${CMAKE_COMMAND} -E copy_if_different ${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/${precompiled}.dir/precompiled_cpp.cpp.o ${CMAKE_BINARY_DIR}/${precompiledSubDir}/precompiled.h.gch
		DEPENDS ${precompiled}
	)
	
	add_dependencies(${targetName} ${precompiledCopy})
	target_compile_options(${targetName} PRIVATE -include ${CMAKE_BINARY_DIR}/${precompiledSubDir}/precompiled.h)
endfunction(use_precompiled_header)

function(get_transitive_link_dependencies_for_precompiled_header targetName precompiledTargetName)
	# Look at all the libraries that the target uses and import their settings
	get_target_property(_link_libraries ${targetName} LINK_LIBRARIES)
	foreach(_library IN ITEMS ${_link_libraries})
		if (TARGET ${_library})
			get_target_property(_includes ${_library} INTERFACE_INCLUDE_DIRECTORIES)
			if(_includes)
				target_include_directories(${precompiledTargetName} SYSTEM PRIVATE ${_includes})
			endif()

			get_target_property(_definitions ${_library} INTERFACE_COMPILE_DEFINITIONS)
			if(_definitions)
				target_compile_definitions(${precompiledTargetName} PRIVATE ${_definitions})
			endif()

			get_target_property(_options ${_library} INTERFACE_COMPILE_OPTIONS)
			if(_options)
				target_compile_options(${precompiledTargetName} PRIVATE ${_options})
			endif()

			get_transitive_link_dependencies_for_precompiled_header(${_library} ${precompiledTargetName})
		endif()
	endforeach(_library)
endfunction(get_transitive_link_dependencies_for_precompiled_header)

add_executable(htpc-control-server
	src/main.cpp
	src/CecConnector.cpp
	src/CecConnector.h
	src/Server.cpp
	src/Server.h
	src/Request.cpp
	src/Request.h
	src/RequestHandler.cpp
	src/RequestHandler.h)

find_package(Qt5 REQUIRED Network)
target_link_libraries(htpc-control-server Qt5::Core Qt5::Network -lcec)
use_precompiled_header(htpc-control-server)
